import time
import threading
import logging
from infrastructure.habit_repository import HabitRepository

class HabitScheduler:
    def __init__(self):
        self.repo = HabitRepository()
        self.stop_thread = False  # Flag to stop the scheduler

        # Set up logging
        logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(message)s")

    def check_habits(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É."""
        while True:
            now = int(time.time())
            habits = self.repo.get_all_habits()

            for habit in habits:
                start_date = habit["start_date"]
                period = habit["period"]
                next_due = habit.get("next_due", None)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                last_completed = habit.get("last_completed", None)

                if next_due is None:  # –ï—Å–ª–∏ `next_due` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—á–∏—Å–ª—è–µ–º –µ–≥–æ –¥–ª—è –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    cycles_passed = (now - start_date) // period
                    next_due = start_date + (cycles_passed + 1) * period
                    habit["next_due"] = next_due
                    self.repo.update_habit(habit["habit_id"], habit)

                #print(f"Current time (now): {now}, Next due time: {next_due}, Habit completed: {habit['is_completed']}")

                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏—à–ª–æ
                if now >= next_due and not habit["is_completed"]:
                    print(f"üîî –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É: {habit['title']}!")
                    habit["is_completed"] = True  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–∏–≤—ã—á–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                    habit["last_completed"] = now  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º `next_due`
                    next_due = now + period  # –°–ª–µ–¥—É—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–µ—Ä–∏–æ–¥
                    habit["next_due"] = next_due
                    self.repo.update_habit(habit["habit_id"], habit)

                # –ï—Å–ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ —É–∂–µ –ø—Ä–æ—à–ª–æ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                if habit["is_completed"] and last_completed and now >= next_due:
                    habit["is_completed"] = False
                    habit["last_completed"] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º `next_due`
                    next_due = now + period  # –°–ª–µ–¥—É—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–µ—Ä–∏–æ–¥
                    habit["next_due"] = next_due
                    self.repo.update_habit(habit["habit_id"], habit)
                    print(f"üîÑ –ü—Ä–∏–≤—ã—á–∫–∞ '{habit['title']}' —Å–±—Ä–æ—à–µ–Ω–∞ –Ω–∞ –Ω–æ–≤—ã–π —Ü–∏–∫–ª.")

            time.sleep(1)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É


    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        thread = threading.Thread(target=self.check_habits, daemon=True)
        thread.start()

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        self.stop_thread = True
